/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        dot_excl: dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "dot exc";
            #binding-cells = <0>;
            bindings = <&kp DOT >, <&kp EXCL >;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_qmark: comma_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "comma question";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mult_slash: mult_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "mult slash";
            #binding-cells = <0>;
            bindings = <&kp KP_MULTIPLY>, <&kp KP_SLASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minus_plus: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "minus plus";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS>, <&kp KP_PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        percent_caret: percent_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "caret percent";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp PERCENT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lt_at: lt_at {
            compatible = "zmk,behavior-mod-morph";
            label = "lt at";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        gt_excl: gt_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "gt excl";
            #binding-cells = <0>;
            bindings = <&kp GT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hash_dollar: hash_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "hash dollar";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        under_amps: under_amps {
            compatible = "zmk,behavior-mod-morph";
            label = "under amps";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        td_esc_cmd_ctrl_alt: td_esc_cmd_ctrl_alt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCMD ESC>, <&kp LCTRL>, <&kp LALT>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_cmd {
            timeout-ms = <40>;
            key-positions = <32 33>;
            bindings = <&sk LCMD>;
        };
        combo_ctrl {
            timeout-ms = <40>;
            key-positions = <31 34>;
            bindings = <&sk LCTRL>;
        };
        combo_alt {
            timeout-ms = <40>;
            key-positions = <30 35>;
            bindings = <&sk LALT>;
        };
        combo_lcmd_rshft {
            timeout-ms = <40>;
            key-positions = <32 29>;
            bindings = <&sk LCMD  &sk RSHIFT>;
        };
        combo_lshft_rcmd {
            timeout-ms = <40>;
            key-positions = <20 33>;
            bindings = <&sk LSHIFT  &sk RCMD >;
        };
        combo_lshft_lcmd {
            timeout-ms = <40>;
            key-positions = <20 32>;
            bindings = <&sk LSHIFT  &sk LCMD >;
        };
        combo_rshft_rcmd {
            timeout-ms = <40>;
            key-positions = <29 33>;
            bindings = <&sk LSHIFT  &sk RCMD >;
        };
        combo_cmd_ctrl {
            timeout-ms = <40>;
            key-positions = <32 34>;
            bindings = <&sk LCMD  &sk RCTRL>;
        };
        combo_ctrl_cmd {
            timeout-ms = <40>;
            key-positions = <31 33>;
            bindings = <&sk RCMD  &sk LCTRL>;
        };
        combo_cmd_alt {
            timeout-ms = <40>;
            key-positions = <32 35>;
            bindings = <&sk LCMD  &sk RALT >;
        };
        combo_alt_cmd {
            timeout-ms = <40>;
            key-positions = <30 33>;
            bindings = <&sk LALT  &sk RCMD >;
        };
        combo_ctrl_alt {
            timeout-ms = <40>;
            key-positions = <31 35>;
            bindings = <&sk LCTRL  &sk RALT>;
        };
        combo_alt_ctrl {
            timeout-ms = <40>;
            key-positions = <30 34>;
            bindings = <&sk LALT  &sk RCTRL>;
        };
        combo_ctrl_shft {
            timeout-ms = <40>;
            key-positions = <31 29>;
            bindings = <&sk LCTRL  &sk RSHIFT>;
        };
        combo_shft_ctrl {
            timeout-ms = <40>;
            key-positions = <20 34>;
            bindings = <&sk LSHIFT  &sk RCTRL>;
        };

        combo_alt_shft {
            timeout-ms = <40>;
            key-positions = <30 29>;
            bindings = <&sk LALT  &sk RSHIFT>;
        };
        combo_shft_alt {
            timeout-ms = <40>;
            key-positions = <20 35>;
            bindings = <&sk LSHIFT  &sk RALT>;
        };
    };

    macros {
        tab_search: tab_search {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LG(L) &kp PERCENT &kp SPACE>
                ;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ' "   |  ,?  |  .! |  p  |  y  |     |  f  |  g   |  c   |  r   | l |
// |  a     |  o   |  e  |  u  |  i  |     |  d  |  h   |  t   |  n   | s | 
// |  ;  :  |  q   |  j  |  k  |  x  |     |  b  |  m   |  w   |  v   | z |
//             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |
                        display-name = "dvorak";
                        bindings = <
   &kp SQT          &comma_qmark   &dot_excl    &kp P    &kp Y         &kp F    &kp G    &kp C    &kp R   &kp L
   &kp A            &kp O          &kp E        &kp U    &kp I         &kp D    &kp H    &kp T    &kp N   &kp S
   &mt LSHIFT SEMI  &kp Q          &kp J        &kp  K    &kp X        &kp B    &kp M    &kp W    &kp V   &mt RSHIFT Z
              &td_esc_cmd_ctrl_alt   &lt 4 LS(TAB)  &lt 3 SPACE        &lt 2 RET   &lt 5 TAB  &lt 1 LG(SPACE)
                        >;
                };

                qwerty {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  t   |  n   | SQT | 
// |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | CTRL | META | DOT |
//             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |
                        display-name = "qwerty";
                        bindings = <
   AS(Q) AS(W) AS(E) AS(R) AS(T)     AS(Y)   AS(U)  AS(I)     AS(O)     AS(P)
   AS(A) AS(S) AS(D) AS(F) AS(G)     AS(H)   AS(J)  AS(K)     AS(L)     AS(SQT)
   AS(Z) AS(X) AS(C) AS(V) AS(B)     AS(N)   AS(M)  &kp LCTL  &kp RALT  AS(DOT)
        &to 1   &mo 1 &kp SPACE     AS(RET) &mo 2  &to 0
                        >;
                };



                nav {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |     |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+ |  {  |  [  |  (  |     |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |     |     |  ,< |  :  |     |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "nav";
                        bindings = <

   &kp LS(UP)           &kp LS(LEFT) &kp LS(RIGHT)   &kp LS(DOWN)  &kp LG(A)                       &kp LG(LBKT)     &kp BACKSPACE    &kp  UP             &mt RC(K) RC(D) &kp RG(RBKT)
   &kp LG(LEFT)         &kp LA(LEFT) &kp RA(RIGHT)   &kp RG(RIGHT) &kp LG(F)                       &kp RG(Z)        &kp LEFT         &kp DOWN            &kp RIGHT       &kp RG(RS(Z))
   &mt LSHIFT LG(LS(C)) &kp LG(X)    &kp LG(C)       &kp LG(V)     &kp LS(LG(V))                   &tab_search      &kp PG_DN        &mt LS(LG(R)) LG(R) &kp PG_UP       &kp RG(SLASH)
                  &mt RG(KP_MINUS) RG(KP_PLUS)    &mt LG(L) LG(T) &mt LC(DOT) SPACE                  &trans   &trans    &trans
                        >;
                };

                sym {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |     |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+ |  {  |  [  |  (  |     |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |     |     |  ,< |  :  |     |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "symbol";
                        bindings = <
&none          &kp BACKSPACE   &kp  UP         &mt LC(K) LC(D) &kp LG(SLASH)       &mult_slash      &kp LBKT    &kp RBKT    &under_amps    &kp BACKSLASH
&kp LG(Z)      &kp LEFT        &kp DOWN        &kp RIGHT       &kp LG(RS(Z))       &minus_plus      &kp LPAR    &kp RPAR    &kp KP_EQUAL   &kp SLASH
&kp LSHIFT     &kp F10         &kp F11         &kp LS(F11)     &kp F5              &percent_caret   &lt_at      &gt_excl    &hash_dollar   &kp GRAVE
                                            &trans   &trans    &trans              &kp RCMD     &kp RCTRL     &kp RALT
                        >;
                };

                num {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |        |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+    |  {  |  [  |  (  |        |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |        |     |  ,< |  :  |        |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |           | ENT |     | TAB |
                        display-name = "number";
                        bindings = <
&none             &kp BACKSPACE   &kp  UP         &mt RC(K) LC(D) &none                   &mt MINUS PLUS  &kp N7       &kp N8       &kp N9       &mt SLASH KP_MULTIPLY
&kp LG(Z)         &kp LEFT        &kp DOWN        &kp RIGHT       &kp LG(RS(Z))           &kp COMMA       &kp N4       &kp N5       &kp N6       &kp COLON
&mt LSHIFT GRAVE  &kp TAB         &sk RSHIFT      &kp RS(TAB)     &kp RS(GRAVE)           &kp N0          &kp N1       &kp N2       &kp N3       &none  
                                  &none           &none           &none                   AS(RET)         &mt RSHIFT TAB          &kp TAB
                        >;
                };



                system {
// -----------------------------------------------------------------------------------------
// | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// | BT1   | BT2 | BT3 | BT4 | BT5 |     | C_MUTE  | C_VOL_DN |  C_Vol_UP | C_BRI_DN | C_BRI_UP |  
// | BTCLR |     |     |     |     |     |  play   | prev     |  next     |          |          |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "function";
                        bindings = <
   &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR                  &kp RC(RA(UP))             &mt LG(LC(LA(LEFT))) LC(LA(LEFT)) &kp  LC(LA(RET))    &mt LG(LC(LA(RIGHT))) LC(LA(RIGHT))   &kp RC(RA(DOWN))    
   &kp C_MUTE        &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN  &kp C_BRI_UP                &mt LG(BACKSLASH) LG(DOT)  &sk  RGUI    &sk RCTRL      &sk RALT     &sk RSHIFT
   &mt LSHIFT GRAVE  &bt BT_CLR    &kp C_PREV    &kp C_NEXT      &kp C_PP                  &none                      &none        &none          &none        &sk RSHIFT 
                                &mt LG(Q) LG(W)   &kp LG(M)  &kp TAB                &trans  &trans  &trans
                        >;
                };

                mod {
// -----------------------------------------------------------------------------------------
// | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// | BT1   | BT2 | BT3 | BT4 | BT5 |     | C_MUTE  | C_VOL_DN |  C_Vol_UP | C_BRI_DN | C_BRI_UP |  
// | BTCLR |     |     |     |     |     |  play   | prev     |  next     |          |          |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "function";
                        bindings = <
   &trans      &trans     &trans       &trans      &trans      &trans   &trans    &trans    &trans      &trans
   &sk LSHIFT  &sk LALT   &sk LCTRL    &sk LGUI    &trans      &none    &kp GRAVE &kp TAB   &kp RS(TAB) &kp RS(GRAVE)
   &trans      &trans     &trans       &trans      &trans      &trans   &trans   &trans    &trans   &trans
               &sk LALT   &sk LCTRL    &sk LGUI    &trans   &trans   &trans
                        >;
                };

        };
};
